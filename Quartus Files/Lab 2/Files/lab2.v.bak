module lab2(
    // input [9:0] SW,
    input [1:0] KEY,
    input ADC_CLK_10,
    output [7:0] HEX5,
    output [7:0] HEX4,
    output [7:0] HEX3,
    output [7:0] HEX2,
    output [7:0] HEX2,
    output [7:0] HEX0,
    output [9:0] LEDR
);

assign LEDR[9:2] = 1'b0;

////////////// KEY0 Toggle //////////////

reg toggle;
toggle T1 ( .key(KEY[0]), .toggle(toggle));
assign LEDR[0] = toggle;

////////////// Divide Clock //////////////

reg clock1;
clkdiv( .clockin(ADC_CLK_10), .clockout(clock1));
assign LEDR[1] = clock1;

////////////// Start BCDs & Display Output (1-99) //////////////

reg [3:0] value1;

bcd B4 ( .clock(clock1), .enable(1'b1), .reset_n(toggle), .mod10(value1));

reg [3:0] value2;
reg enable;
reg blank = 1;

always @(posedge clock1)
begin
    if (value1 == 9)
        enable = 1;
        blank = 0;
    else
        enable = 0;
end

bcd B5 ( .clock(clock1), .enable(enable), .reset_n(toggle), .mod10(value2));

sevenseg U5 ( .data(value2), .minus(1'b0), .blank(1'b0), .HEX(HEX5));
sevenseg U4 ( .data(value1), .minus(1'b0), .blank(blank), .HEX(HEX4));

////////////// Translate BCD Output & Display as Month (1-4) and Day (1-31) //////////////

sevenseg U3 ( .data(1'b0), .minus(1'b0), .blank(1'b1), .HEX(HEX3));
sevenseg U2 ( .data(), .minus(1'b0), .blank(1'b1), .HEX(HEX2));
sevenseg U1 ( .data(), .minus(1'b0), .blank(1'b1), .HEX(HEX1));
sevenseg U0 ( .data(), .minus(1'b0), .blank(1'b1), .HEX(HEX0));

endmodule